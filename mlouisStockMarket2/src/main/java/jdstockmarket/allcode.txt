package jdstockmarket;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.data.time.Minute;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.ui.ApplicationFrame;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.data.time.Minute;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.TimeZone;

import java.util.Scanner;

public class AlphaVantageCloseChart extends ApplicationFrame {
	
	//	public static void main(String[] args) throws Exception {

	private JFreeChart resultChart;
	private ArrayList<Double> closes;;
	
	public JFreeChart getResultChart() {
		return resultChart;
	}

	public AlphaVantageCloseChart(String title, String stockSymbol) throws JsonMappingException, JsonProcessingException 
	{
		super(title);
		//String stockSymbol = "AVGO";  // Default Stock to use

		// comment next line to use default Stock Symbol
		//stockSymbol = getSymbolFromConsole(stockSymbol);  //arg is default stock symbol

		String stockData = null; 
		StockMarketAPI api = new StockMarketAPI();

		try {
			stockData = api.fetchLiveStockData(stockSymbol);
		} catch (IOException e) {
			e.printStackTrace();
		}

		// Convert the stock data to a JSON string
		ObjectMapper mapper = new ObjectMapper();
		JsonNode root = mapper.readTree(stockData.toString());
		System.out.println(root);

		// Parse stock data
		JsonNode timeSeries = root.get("Time Series (5min)");
		ArrayList<Date> dates = new ArrayList<>();
		//ArrayList<Double> closes = new ArrayList<>();
		this.closes = new ArrayList<>();

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		dateFormat.setTimeZone(TimeZone.getTimeZone("US/Eastern"));

		// Iterate over each time point in the series
		timeSeries.fieldNames().forEachRemaining(time -> {
			JsonNode dataPoint = timeSeries.get(time);
			try {
				dates.add(dateFormat.parse(time));
				closes.add(dataPoint.get("4. close").asDouble());
			} catch (Exception e) {
				e.printStackTrace();
			}
			
		});
		// Create the dataset using closing prices
		TimeSeriesCollection dataset = createTimeSeriesDataset(stockSymbol, dates, closes);

		// Create the XY time series chart
		JFreeChart chart = createXYChart(dataset, stockSymbol);
		this.resultChart = chart;
	}	  

	//returns last price on graph.  It is actually the FIRST price in the array!
	public double getLastPrice()
	{
		return closes.getFirst();

	}

	//returns first price on graph.  It is actually the LAST price in the array!
	public double getFirstPrice()
	{
		return closes.getLast();
	}

	
	private static JFreeChart createXYChart(TimeSeriesCollection dataset, String stockSymbol) {
		// Create a time series chart
		JFreeChart chart = ChartFactory.createTimeSeriesChart(
				stockSymbol ,  // Title
				"Time",                                // X-Axis Label
				"Price",                       // Y-Axis Label
				dataset,                               // Dataset
				false,                                 // No legend
				true,                                  // Tooltips
				false                                  // URLs
				);

		XYPlot plot = chart.getXYPlot();

		// Configure the date axis (X-axis)
		DateAxis axis = (DateAxis) plot.getDomainAxis();
		axis.setDateFormatOverride(new SimpleDateFormat("HH:mm"));

		// Get the Y-axis (price axis)
		NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();

		return chart;
	}


	private static TimeSeriesCollection createTimeSeriesDataset(String stockSymbol, ArrayList<Date> dates, ArrayList<Double> closes) {
		TimeSeries timeSeries = new TimeSeries(stockSymbol);

		// Populate the time series with dates and closing prices
		for (int i = 0; i < dates.size(); i++) {
			timeSeries.addOrUpdate(new Minute(dates.get(i)), closes.get(i));
		}

		// Create the TimeSeriesCollection dataset
		TimeSeriesCollection dataset = new TimeSeriesCollection();
		dataset.addSeries(timeSeries);

		return dataset;
	}

	private static String getSymbolFromConsole(String defaultStockSymbol)
	{
		// Create a Scanner instance
		Scanner scanner = new Scanner(System.in);

		// Prompt the user for input
		System.out.print("Please enter a stock symbol or <Enter> for default "
				+ defaultStockSymbol + " : ");

		// Read the input word
		String tempStockSymbol = scanner.nextLine();

		// Close the scanner
		scanner.close();

		return tempStockSymbol=="" ?  defaultStockSymbol : tempStockSymbol;
	}
}
package jdstockmarket;

import javax.swing.*;
import javax.swing.border.EmptyBorder;

import java.awt.*;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.json.*;

/**
 * The {@code GUIController} class serves as the central interface for the JD Stock Market application.
 * This class extends {@link JFrame}, utilizing windowing components to provide a user-friendly graphical interface.
 *
 * Key Features:
 * - Interacts with the {@link StockMarketAPI} and {@link CongressStockAPI} to retrieve real-time stock market data.
 * - Manages a user's stock portfolio through integration with {@link Portfolio}.
 * - Displays live updates of stock prices and portfolio values.
 * - Provides functionality to add new stocks to a user's portfolio and track their performance.
 *
 * The GUI layout includes text fields for input (e.g., stock symbols, share quantities), text areas for displaying stock and portfolio information,
 * and buttons for various actions like fetching stock information, adding stocks, and toggling live portfolio updates.
 *
 * Usage:
 * Users can enter stock symbols to fetch current stock data or enter stock symbols and share quantities to add stocks to their portfolio.
 * The application also features a section for viewing the impact of notable figures (e.g., Nancy Pelosi) on stock performance, offering unique insights.
 *
 * Error Handling:
 * The application includes robust error handling to manage issues like invalid inputs, network problems, or API limitations, ensuring a smooth user experience.
 *
 * @author David Martindale
 * @author Jamshaid Ali
 * @version 2.0 (7 December 2023)
 * @see JFrame
 * @see StockMarketAPI
 * @see CongressStockAPI
 * @see Portfolio
 */
public class GUIController extends JFrame {

	private static final long serialVersionUID = 1L;
	
	// Named constants
	private static final Color PRIMARY_COLOR = new Color(13, 148, 148); // Teal
	private static final Color ACCENT_COLOR = new Color(200, 255, 255); // Mint
	private static final Color TEXT_COLOR = Color.BLACK; // Black
	protected static final String TIME_SERIES_KEY = "Time Series (5min)"; //Key that holds the stock JSON data from API response
	private static final String FILE_NAME = "portfolio.txt"; // Txt file that holds portfolio data
	private static final String LOGO_FILE_NAME = "/stockLogo.png";
	
	// Instance variables for managing GUI and API calls
    private StockMarketAPI stockAPI;
//    private CongressStockAPI congressAPI;
    private StockJSONHandler jsonHandler;
    // Global JFrame elements
    private JTextField stockSymbolField;
    private JTextArea stockInfoArea;
    private JTextArea portfolioArea;
    private JButton fetchButton;
    private JToggleButton updatePricesToggle;
    private JButton pelosiButton;
    private JTextArea pelosiTextArea;
    private ImageIcon icon;
     
    /**
     * Constructor for GUIController.
     * Initializes the components and sets up the graphical user interface.
     * It also displays an instruction dialog upon startup.
     */
    public GUIController() {
        initializeComponents();
        setupGUI();
    }
    
    /**
     * Initializes all the components used in the GUI.
     * This includes creating and setting up buttons, text areas, text fields, and other GUI elements.
     * It also sets up action listeners for interactive components.
     */
    private void initializeComponents() {
        stockAPI = new StockMarketAPI();
       // congressAPI = new CongressStockAPI();
        jsonHandler = new StockJSONHandler();

        stockSymbolField = createStyledTextField(10);
        stockInfoArea = createStyledTextArea();
        portfolioArea = createStyledTextArea();
        pelosiTextArea = createStyledTextArea();

        fetchButton = createStyledButton("Fetch Stock Info");
        pelosiButton = createStyledButton("Nancy Pelosi ?");
        updatePricesToggle = new JToggleButton("Off");

        fetchButton.addActionListener(e -> fetchStockInfo());
        //pelosiButton.addActionListener(e -> fetchCongressInfo());
        updatePricesToggle.addActionListener(e -> updatePortfolioDisplay(updatePricesToggle.isSelected()));
        
        try {
			icon = new ImageIcon(getClass().getResource(LOGO_FILE_NAME));
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
        if (icon.getImageLoadStatus() != MediaTracker.COMPLETE) {
            System.out.println("Failed to load logo image");
        }
    }
    
    /**
     * Sets up the overall layout and design of the GUI.
     * This method organizes the various panels and components within the JFrame.
     * It sets the window properties like size, visibility, and default close operation.
     */
    private void setupGUI() {
        setTitle("JD Stock Market");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());
        getContentPane().setBackground(PRIMARY_COLOR);

        add(createWestPanel(), BorderLayout.WEST);
        add(createCenterPanel(), BorderLayout.CENTER);
        add(createSouthPanel(), BorderLayout.SOUTH);
        
        setResizable(false); // Prevent resizing of the JFrame

        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    /**
     * Creates and configures the West panel of the GUI.
     * This panel includes components for stock symbol input, stock fetching, and portfolio management.
     * 
     * @return JPanel The configured West panel.
     */
    private JPanel createWestPanel() {
        JPanel westPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        westPanel.setBackground(PRIMARY_COLOR);
        westPanel.setBorder(new EmptyBorder(10, 10, 10, 10)); // Padding (T, L, B, R)

        // Constraints for the components
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5); // Margin around components (T, L, B, R)

        // Label for Stock Symbol field
        JLabel stockSymbolLabel = createStyledLabel("Enter Stock Symbol: ");
        westPanel.add(stockSymbolLabel, gbc);

        // TextField for Stock Symbol field
        gbc.gridy++;
        stockSymbolField = createStyledTextField(10);
        stockSymbolField.addActionListener(e -> fetchStockInfo());
        westPanel.add(stockSymbolField, gbc);

        // Fetch Button
        gbc.gridy++;
        fetchButton = createStyledButton("Fetch Stock Info");
        fetchButton.addActionListener(e -> fetchStockInfo());
        westPanel.add(fetchButton, gbc);
        
        // Label for Number of Shares TextField
        gbc.gridy++;
        JLabel sharesFieldLabel = createStyledLabel("Enter Share Quantity:");
        westPanel.add(sharesFieldLabel, gbc);

        // TextField for Number of Shares
        gbc.gridy++;
        JTextField sharesField = createStyledTextField(10);
        sharesField.addActionListener(e -> addStock(sharesField.getText()));
        westPanel.add(sharesField, gbc);

        // Add Stock Button
        gbc.gridy++;
        JButton addStockButton = createStyledButton("Add Stock");
        addStockButton.addActionListener(e -> addStock(sharesField.getText()));
        westPanel.add(addStockButton, gbc);
        
        // Add Display Porfolio Button
        gbc.gridy++;
        JButton displayPortfolioButton = createStyledButton("Display Portfolio");
        displayPortfolioButton.addActionListener(e -> updatePortfolioDisplay(updatePricesToggle.isSelected()));
        westPanel.add(displayPortfolioButton, gbc);
        
        /// Initialize the toggle button
        updatePricesToggle = new JToggleButton("Off");
        
        // Set static button size to keep from knocking into other frame elements when clicked
        Dimension buttonSize = new Dimension(50, 30); // Set a fixed size (width, height)
        updatePricesToggle.setPreferredSize(buttonSize);
        updatePricesToggle.setMinimumSize(buttonSize);
        updatePricesToggle.setMaximumSize(buttonSize);

        // Toggle button action listener
        updatePricesToggle.addActionListener(e -> {
            if (updatePricesToggle.isSelected()) {
                updatePricesToggle.setText("On");
            } else {
                updatePricesToggle.setText("Off");
            }
        });
        
        // Label for "Live Portfolio" button
        JLabel updatePricesLabel = new JLabel(" Live Portfolio");

        // Add the label and toggle button to the panel
        gbc.gridx = 0; gbc.gridy = 10; // Set grid position for label
        westPanel.add(updatePricesLabel, gbc);
        gbc.gridx = 1; // Adjust grid position for toggle button
        gbc.insets = new Insets(0, -40, 5, 0); // (T, L, B, R) padding
        westPanel.add(updatePricesToggle, gbc);
        
        // Add Pelosi Button
        gbc.gridy = 11;
        gbc.gridx = 0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 0, 5); // Margin around component (T, L, B, R)
        westPanel.add(pelosiButton, gbc);
     
        return westPanel;
    }
    
    /**
     * Creates and configures the Center panel of the GUI.
     * This panel is designated for displaying stock information and user portfolio.
     * 
     * @return JPanel The configured Center panel.
     */
    private JPanel createCenterPanel() {
        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.setBackground(PRIMARY_COLOR);

        // Stock Info Panel
        JPanel stockInfoPanel = new JPanel(new BorderLayout());
        JLabel stockInfoLabel = new JLabel("Stock Information");
        stockInfoLabel.setFont(new Font("Arial", Font.BOLD, 14));
        stockInfoLabel.setBorder(new EmptyBorder(5, 112, 4, 10));
        stockInfoPanel.add(stockInfoLabel, BorderLayout.NORTH);
        stockInfoPanel.add(new JScrollPane(stockInfoArea), BorderLayout.CENTER);
        stockInfoPanel.setBackground(PRIMARY_COLOR);

        // Portfolio Panel
        JPanel portfolioPanel = new JPanel(new BorderLayout());
        JLabel portfolioLabel = new JLabel("Your Portfolio");
        portfolioLabel.setFont(new Font("Arial", Font.BOLD, 14));
        portfolioLabel.setBorder(new EmptyBorder(5, 130, 4, 10));
        portfolioPanel.add(portfolioLabel, BorderLayout.NORTH);
        portfolioPanel.add(new JScrollPane(portfolioArea), BorderLayout.CENTER);
        portfolioPanel.setBackground(PRIMARY_COLOR);
        portfolioPanel.setBorder(new EmptyBorder(0, 0, 0, 15));

        centerPanel.add(stockInfoPanel, BorderLayout.CENTER);
        centerPanel.add(portfolioPanel, BorderLayout.EAST);

        return centerPanel;
    }
    
    /**
     * Creates and configures the South panel of the GUI.
     * This panel includes additional information and branding elements.
     * 
     * @return JPanel The configured SouthWest panel.
     */
    private JPanel createSouthPanel() {
        JPanel southPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        southPanel.setBackground(PRIMARY_COLOR);
        southPanel.setBorder(new EmptyBorder(10, 0, 10, 0));

        // Load and resize the ImageIcon
        Image image = icon.getImage();
        Image resizedImage = image.getScaledInstance(550, 250, Image.SCALE_SMOOTH); //(width, height)
        ImageIcon resizedIcon = new ImageIcon(resizedImage);

        // Create a JLabel with the resized ImageIcon
        JLabel logoLabel = new JLabel(resizedIcon);

        // Constraints for Pelosi TextArea
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(-10, 15, 5, 18);

        JScrollPane pelosiScrollPane = new JScrollPane(pelosiTextArea);
        pelosiScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        pelosiScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        southPanel.add(pelosiScrollPane, gbc);

        // Constraints for Logo Label
        gbc.gridx = 1; // Position to the right of Pelosi TextArea
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.NONE;
        gbc.weightx = 1.0; // Logo to grow in size
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.CENTER; // Align to the top, if needed
        gbc.insets = new Insets(-20, -195, -20, -165); // Top, Left, Bottom, Right padding
        southPanel.add(logoLabel, gbc);

        return southPanel;
    }

    /**
     * Creates and returns a styled JButton with specified text.
     * The button is styled according to the application theme.
     * 
     * @param text The text to display on the button.
     * @return JButton A styled button with the specified text.
     */
    private JButton createStyledButton(String text) {
        JButton button = new JButton(text);
        button.setBackground(ACCENT_COLOR);
        button.setForeground(TEXT_COLOR);
        button.setFocusPainted(false);
        button.setFont(new Font("Arial", Font.BOLD, 12));
        button.setBorder(BorderFactory.createEmptyBorder(10, 15, 10, 15));

        // Hover effect
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(ACCENT_COLOR.darker());
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(ACCENT_COLOR);
            }
        });

        return button;
    }
    
    /**
     * Creates and returns a styled JTextField with a specified column size.
     * The text field is styled according to the application theme.
     * 
     * @param columns The number of columns for the text field.
     * @return JTextField A styled text field with the specified column size.
     */
    private JTextField createStyledTextField(int columns) {
        JTextField textField = new JTextField(columns);
        textField.setBorder(BorderFactory.createLineBorder(ACCENT_COLOR, 2));
        textField.setBackground(Color.WHITE);
        textField.setForeground(Color.BLACK);
        return textField;
    }

    /**
     * Creates and returns a styled JLabel with specified text.
     * The label is styled according to the application theme.
     * 
     * @param text The text to display on the label.
     * @return JLabel A styled label with the specified text.
     */
    private JLabel createStyledLabel(String text) {
        JLabel label = new JLabel(text);
        label.setForeground(TEXT_COLOR);
        return label;
    }
    
    /**
     * Creates and returns a styled JTextArea.
     * The text area is configured for display purposes and is non-editable.
     * 
     * @return JTextArea A styled, non-editable text area.
     */
    private JTextArea createStyledTextArea() {
        JTextArea textArea = new JTextArea(15, 30);
        textArea.setEditable(false);
        textArea.setLineWrap(true); // Enable line wrapping
        textArea.setWrapStyleWord(true); // Wrap lines at word boundaries
        
        // Creating a less saturated blue color
        float[] hsbValues = Color.RGBtoHSB(207, 234, 234, null);
        // Reduce saturation with #.#f value
        Color lessSaturatedBlue = Color.getHSBColor(hsbValues[0], 0.1f, hsbValues[2]); 
        
        textArea.setBackground(lessSaturatedBlue);
        textArea.setForeground(Color.BLACK);
        textArea.setBorder(BorderFactory.createLineBorder(ACCENT_COLOR, 3));
        return textArea;
    }

    /**
     * Fetches and displays information about a stock based on the entered stock symbol.
     * Retrieves data from the StockMarketAPI and displays it in the stockInfoArea text area.
     */
    private void fetchStockInfo() {
    	String stockSymbol = stockSymbolField.getText().toUpperCase();
    	
    	if (stockSymbol.isBlank()) {
    		stockInfoArea.setText("  Invalid Input: Please enter a stock symbol\n");
    		return;
    	}
    	
        try {
            
        	JSONObject stockJSON = jsonHandler.fetchStockData(stockAPI, stockSymbol);
            String displayText = jsonHandler.displayStockInfo(stockJSON, stockSymbol);
            stockInfoArea.setText(displayText);

	    } catch (IOException ioe) {
	        stockInfoArea.setText("  IOException In fetchStockInfo() -> " + ioe.getMessage() + "\n");
	    } catch (JSONException je) {
	        stockInfoArea.setText("  JSON parsing error: " + je.getMessage() + "\n");
	    } catch (Exception ex) {
	        stockInfoArea.setText("  An unexpected error occurred...that sucks \n  [Exception] > " + ex.getMessage() + "\n");
	    }
    }
    
 
    /**
     * Adds a stock to the user's portfolio based on the entered stock symbol and share quantity.
     * Retrieves the latest stock price and updates the portfolio accordingly.
     * 
     * @param sharesText The text representing the number of shares to add.
     */
    private void addStock(String sharesText) {
            try {
            	String stockSymbol = stockSymbolField.getText().toUpperCase();
            	
            	if (stockSymbol.isBlank()) {
            		stockInfoArea.setText("  Invalid Input: Please enter a stock ticker\n");
            		return;
            	}
            	
            	if (sharesText.isBlank()) {
            		stockInfoArea.setText("  Invalid Input: Please enter a quantity of shares\n");
            		return;
            	}
            	
                JSONObject stockJSON = jsonHandler.fetchStockData(stockAPI, stockSymbol);
                int shares = Integer.parseInt(sharesText);
                
                if (stockJSON.has(TIME_SERIES_KEY)) {
                	
                    JSONObject timeSeries = stockJSON.getJSONObject(TIME_SERIES_KEY);
                    ArrayList<String> timeStamps = new ArrayList<>(timeSeries.keySet());
                    Collections.sort(timeStamps);
                    String latestTimeStamp = timeStamps.get(timeStamps.size() - 1); 
                    JSONObject latestData = timeSeries.getJSONObject(latestTimeStamp);
                    Double mostRecentPrice = Double.parseDouble(latestData.getString("4. close"));
                    Stock stock = new Stock(stockSymbol, mostRecentPrice, shares);
                    
                    PortfolioManager.updatePortfolio(stock);
                    stockInfoArea.append("  Added " + shares + " shares of " + stockSymbol + "\n");
                    updatePortfolioDisplay(updatePricesToggle.isSelected());

                } else {
                    stockInfoArea.append("  Time Series data not available for " + stockSymbol + " right now\n");
                }
                
                
            } catch (NumberFormatException ex) {
                stockInfoArea.setText("  NumberFormatException: \n  " + ex.getMessage());
            } catch (JSONException je) {
            	stockInfoArea.setText("  JSONExeption: \n  " + je.getMessage());
            } catch (IOException ioe) {
				stockInfoArea.setText("  Add Stock: IOException:\n   " + ioe.getMessage());
			}
    }
    
    /**
     * Updates the display of the user's portfolio.
     * Optionally updates the stock prices in the portfolio based on the toggle button state.
     * 
     * @param updatePricesONorOFF A boolean indicating whether to update prices (true) or not (false).
     */
    public void updatePortfolioDisplay(boolean updatePricesONorOFF) {
    	// Update portfolio with most recent prices with an API call
    	try {
			Portfolio portfolio = PortfolioManager.readPortfolioFromFile();
			PortfolioManager.updateStockPrices(portfolio, updatePricesONorOFF);
		} catch (NullPointerException npe) {
			portfolioArea.setText("  ERROR: Price update failed\n\n" + "  API call limit reached today...\n");
			return;
		} catch (Exception e) {
			portfolioArea.setText(e.getMessage());
			return;
		}
    	
        StringBuilder formattedContent = new StringBuilder();
        DecimalFormat numberFormat = new DecimalFormat("#,##0.00");

        try {
            List<String> lines = Files.readAllLines(Paths.get(FILE_NAME));
            Double portfolioTotal = 0.0;
            // Calculate the total portfolio value first
            for (String line : lines) {
                String[] parts = line.split(",");
                if (parts.length == 3) {
                    double price = Double.parseDouble(parts[1]);
                    int shares = Integer.parseInt(parts[2]);
                    portfolioTotal += shares * price;
                }
            }
            // Append the total portfolio value at the top
            formattedContent.append("  Porfolio Value: $").append(numberFormat.format(portfolioTotal)).append("\n\n");
            // Append details of each stock
            for (String line : lines) {
                String[] parts = line.split(",");
                if (parts.length == 3) {
                    String ticker = parts[0];
                    double price = Double.parseDouble(parts[1]);
                    int shares = Integer.parseInt(parts[2]);
                    Double totalValue = shares * price;
                    formattedContent.append("  Ticker: ").append("[ " + ticker + " ]")
                                    .append(",  Price: $").append(numberFormat.format(price))
                                    .append(",  Shares: ").append(shares)
                                    .append("\n  Stock Value: $").append(numberFormat.format(totalValue))
                                    .append("\n\n");
                }
            }
            // Check for empty portfolio and notify user if empty
            if (lines.isEmpty()) {
                formattedContent.append("  You have no stock holdings\n");
            }
            portfolioArea.setText(formattedContent.toString());
            portfolioArea.setCaretPosition(0);
        } catch (IOException ioe) {
            portfolioArea.setText("Error loading portfolio data...\n");
            portfolioArea.append(ioe.getMessage());
        }
    }
    
 
}
package jdstockmarket;

import org.json.JSONArray;
import org.json.JSONObject;

/**
 * The {@code JSONHandler} interface defines a contract for handling JSON data. It declares methods
 * for parsing a JSON string and retrieving a value associated with a specified key from a
 * {@code JSONObject}.
 *
 * <p>This interface abstracts the JSON data handling operations, allowing different implementations
 * to provide specific JSON handling strategies. Implementing classes are expected to provide
 * concrete implementations for parsing JSON data and retrieving values from JSON objects.
 *
 * @author David Martindale
 * @author Jamshaid Ali
 * @version 2.0 (7 December 2023)
 * @see JSONObject
 */

public interface JSONHandler {
	
    /**
     * Parses a JSON string and returns a {@code JSONObject}.
     *
     * @param jsonData The JSON string to be parsed.
     * @return A {@code JSONObject} representing the parsed JSON data.
     */
    abstract JSONObject parseJSON(String jsonData);
    
    abstract JSONArray parseJSONArray(String jsonData);

    /**
     * Retrieves a value associated with a specified key from a {@code JSONObject}.
     *
     * @param jsonObject The {@code JSONObject} from which to retrieve the value.
     * @param key The key whose associated value is to be returned.
     * @return A {@code JSONObject} representing the value associated with the specified key.
     */
    abstract JSONObject getValue(JSONObject jsonObject, String key);
}//package jdstockmarket;

//public class NewCode {

// **************************************

//	JButton chartButton = new JButton("Display Chart");
//
//	//create a listener for this button 
//	AlphaVantageCloseChart myAVCloseChart = null;
//	chartButton.addActionListener(new ActionListener() {
//		public void actionPerformed(ActionEvent e) {
//
//			//call the method to get all fields from input boxes and create chart
//			AlphaVantageCloseChart myAVCloseChart = produceChart();  // get chart, put it into jFrame Later
//			//  for example stockSymbol = (String) symbolComboBox.getSelectedItem();
//
//		}
//	});
//***********************
//
//
//public AlphaVantageCloseChart produceChart()
//{
//	//		// Get the selected item from the JComboBox
//	//		stockSymbol = (String) symbolComboBox.getSelectedItem();
//	//		stockSymbol = "AVGO";  // Default Stock to use
//
//	// comment next line to use default Stock Symbol
//	//stockSymbol = getSymbolFromConsole(stockSymbol);  //arg is default stock symbol
//
//	AlphaVantageCloseChart myAVCloseChart = null;
//	try {
//		myAVCloseChart = new AlphaVantageCloseChart ("test chart", stockSymbol, period);
//	} catch (JsonProcessingException e) {
//		// TODO Auto-generated catch block
//		e.printStackTrace();
//	}
//	return myAVCloseChart;
//
//}
//
//*********************		
//double todaysClose;
//if (myAVCloseChart != null)
//{
//	todaysClose = myAVCloseChart.getLastPrice();
//
//	JLabel lblCurrentPrice = new JLabel(String.valueOf(todaysClose));
//	pricesPanel.add(lblCurrentPrice);
//
//	JLabel lblNewLabel_4 = new JLabel("% Gain Today:  ");
//	lblNewLabel_4.setHorizontalAlignment(SwingConstants.RIGHT);
//	pricesPanel.add(lblNewLabel_4);
//
//	//find yesterday's closing price
//	//compute yesterday's date
//	//form request
//	//call api
//	//extract yesterday's closing price
//	double yesterdaysClose = myAVCloseChart.getLastPrice() * 0.90;
//
//
//**************
//
//
//public String fetchLiveStockData(String stockSymbol, String period) throws IOException {
//	//twse
//			// url = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&interval=5min"  
//			//		 url = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=" 
//			//url = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol="
//			//+ "&extended_hours=false"
//			//+ "&symbol="+ stockSymbol + "&apikey=" + API_KEY;
//
//			// Construct the URL for the Alpha Vantage API request
//			String apiQuery = "https://www.alphavantage.co/query?function=";
//			period = "1 Day";
//			
//			switch (period )
//			{
//			case "1 Day":
//				// returns 30 days, 30x8x12 =3,000 pts, only need 30 - 500!
//				apiQuery += "TIME_SERIES_INTRADAY"
//						+ "&outputsize=full"
//						+ "&adjusted=true"
//						+ "&extended_hours=false"
//						+ "&interval=5min";
//				break;
//
//			case "5 Days":
//				//returns 30 days, 30x8x12 = 3000 pts, only need 500 
//				apiQuery += "TIME_SERIES_INTRADAY"
//						+ "&outputsize=full"
//						+ "&adjusted=true"
//						+ "&extended_hours=false"
//						+ "&interval=5min";
//				break;
//
//			case "1 Month":
//				//returns 30 days, 30x8x2 = 500 points.  use all
//				apiQuery += "TIME_SERIES_INTRADAY"
//						+ "&outputsize=full"
//						+ "&adjusted=true"
//						+ "&extended_hours=false"
//						+ "&interval=30min";
//				break;
//
//			case "6 Months":
//				//returns 20 years= 20x250 =5000 pts!  only need 120 points
//				apiQuery += "TIME_SERIES_DAILY_ADJUSTED"
//						+ "&outputsize=full";
//				break;
//
//			case "1 Year":
//				//returns 20 years = 5000 pts!  only need 240 points
//				apiQuery += "TIME_SERIES_DAILY_ADJUSTED"
//						+ "&outputsize=full";
//				break;
//			case "5 Years":
//				//returns 20 years = 20x52 = 1100 pts!  only need 260 points
//				apiQuery += "TIME_SERIES_WEEKLY_ADJUSTED"
//						+ "&outputsize=full";
//				break;
//
//
//			case "Yesterday":
//				//choose yesterday's close. returns 100 daily closes
//				apiQuery += "TIME_SERIES_DAILY_ADJUSTED";  //compact by default
//				break;
//
//			}
//			apiQuery += "&symbol="+ stockSymbol + "&apikey=" + API_KEY;
//			
//			//  Build the HTTP request
//			Request request = new Request.Builder()
//					.url(apiQuery)
//					.build();
//
//			
//
//}
package jdstockmarket;

import java.util.TreeMap;

/**
 * The {@code Portfolio} class represents a collection of stocks, organized in a TreeMap.
 * This class provides a structured way to manage a stock portfolio, with the ability to retrieve and update stock information.
 *
 * Key Features:
 * - Manages a TreeMap where each key-value pair corresponds to a stock symbol and its respective {@link Stock} object.
 * - Offers methods to get and set the entire stock collection, enabling flexibility in managing the portfolio.
 *
 * Usage:
 * An instance of this class can be used to store and manage a user's stock holdings. 
 * The TreeMap structure ensures that stocks are stored in a sorted order based on their symbols, 
 * which can be useful for display or retrieval purposes.
 *
 * Constructor Overview:
 * - The constructor initializes the portfolio with a given TreeMap of stocks. 
 *   This allows for the creation of a portfolio with pre-existing stock data.
 *
 * Note: The effectiveness and suitability of the TreeMap for storing stocks depend on the specific requirements of the application.
 * Considerations might include the need for sorted data, frequency of access, and performance requirements.
 * 
 * @author David Martindale
 * @author Jamshaid Ali
 * @version 2.0 (7 December 2023)
 * @see TreeMap
 * @see Stock
 */
public class Portfolio {

	// Instance variables
	// Idk about these, we'll see i guess
	private TreeMap<String, Stock> stocks;
	
	// TODO is this a good constructor? idk
	public Portfolio(TreeMap<String, Stock> stocks) {
	
		this.stocks = stocks;
		
	}

	/**
	 * @return the stocks
	 */
	public TreeMap<String, Stock> getStocks() {
		return stocks;
	}

	/**
	 * @param stocks the stocks to set
	 */
	public void setStocks(TreeMap<String, Stock> stocks) {
		this.stocks = stocks;
	}

	
}
package jdstockmarket;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import java.util.TreeMap;

import org.json.JSONObject;

/**
 * The {@code PortfolioManager} class provides functionality to manage a stock portfolio.
 * It includes methods for updating the portfolio with new stocks, reading the portfolio from a file, 
 * writing the updated portfolio back to a file, and updating stock prices in the portfolio.
 *
 * Key Functionalities:
 * - {@code updatePortfolio(Stock)}: Adds a new stock to the portfolio or updates existing stock details.
 * - {@code readPortfolioFromFile()}: Reads the portfolio data from a file and constructs a Portfolio object.
 * - {@code writePortfolioToFile(Portfolio)}: Writes the Portfolio object's data back to a file.
 * - {@code fetchCurrentPrice(String)}: Fetches the current price of a stock from the StockMarketAPI.
 * - {@code updateStockPrices(Portfolio, boolean)}: Updates the prices of stocks in the portfolio if the updatePrices flag is true.
 *
 * Usage:
 * This class is used to interact with the portfolio's persistence layer (e.g., a text file) and to update stock information.
 * It serves as an intermediary between the application's GUI and the data layer, ensuring data consistency and handling I/O operations.
 *
 * Error Handling:
 * The class includes error handling for I/O operations and API interactions. 
 * It prints error messages to the console in case of exceptions, ensuring that the application can recover from common errors like file access issues.
 *
 * Note: The class assumes a specific format for the portfolio data file (ticker, price, shares) and requires an existing StockMarketAPI and StockJSONHandler setup.
 * 
 * @author David Martindale
 * @author Jamshaid Ali
 * @version 2.0 (7 December 2023)
 * @see Portfolio
 * @see Stock
 * @see StockMarketAPI
 * @see StockJSONHandler
 */
public class PortfolioManager {

    private static final String FILE_NAME = "portfolio.txt";
    protected static final String TIME_SERIES_KEY = "Time Series (5min)";

    public static void updatePortfolio(Stock newStock) {
        Portfolio portfolio = readPortfolioFromFile();
        
        Stock existingStock = portfolio.getStocks().get(newStock.getStockSymbol());
        if (existingStock != null) {
        	// Update existing stock with new shares
        	int updateShares = existingStock.getShares() + newStock.getShares();
        	existingStock.setShares(updateShares);
        } else {
        	// Update the portfolio with the new stock if stock not there
        	portfolio.getStocks().put(newStock.getStockSymbol(), newStock);
        }

        // Write the updated portfolio back to the file
        writePortfolioToFile(portfolio);

    }

    protected static Portfolio readPortfolioFromFile() {
        File file = new File(FILE_NAME);
        TreeMap<String, Stock> stocks = new TreeMap<>();

        if (!file.exists() || file.length() == 0) {
            return new Portfolio(new TreeMap<>()); 
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            // Read and parse the file content to reconstruct the Portfolio object
            String line;
            while ((line = reader.readLine()) != null) {
            	
            	// Check for and skip any empty lines
            	if (line.trim().isEmpty()) {
            		continue;
            	}
            	
                String[] parts = line.split(",");
                
                // Check to ensure that each line has the correct number of comma-separated values.
                if (parts.length == 3) {
                	// Parse the line to create Stock objects and add them to the stocks map
                    // Example: AAPL,150.00,10
					String ticker = parts[0];
					double price = Double.parseDouble(parts[1]);
					int shares = Integer.parseInt(parts[2]);
					stocks.put(ticker, new Stock(ticker, price, shares));
				} else {
					System.out.println("Warning: Malformed line '" + line + "' in file. Expected format: Ticker,Price,Shares");
				}
                
            }
            return new Portfolio(stocks);
        } catch (IOException e) {
            e.printStackTrace();
            return new Portfolio(new TreeMap<>()); 
        }
    }

    private static void writePortfolioToFile(Portfolio portfolio) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Stock stock : portfolio.getStocks().values()) {
                writer.write(stock.getStockSymbol() + "," + stock.getClosingPrice() + "," + stock.getShares());
                writer.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    // API call to fetch current price of a stock and returns price to Double
    private static Double fetchCurrentPrice(String ticker) {
    	StockMarketAPI stockAPI = new StockMarketAPI();
    	StockJSONHandler jsonHandler = new StockJSONHandler();
    	try {
			String stockData = stockAPI.fetchLiveStockData(ticker);
			JSONObject stockJSON = jsonHandler.parseJSON(stockData);
			
			if (stockJSON.has(TIME_SERIES_KEY)) {
	            JSONObject timeSeries = stockJSON.getJSONObject(TIME_SERIES_KEY);
	            ArrayList<String> timeStamps = new ArrayList<>(timeSeries.keySet());
	            Collections.sort(timeStamps);
	            String latestTimeStamp = timeStamps.get(timeStamps.size() - 1);
	            JSONObject latestData = timeSeries.getJSONObject(latestTimeStamp);
	            return Double.parseDouble(latestData.getString("4. close"));
			} else {
				return null;
			}
		} catch (IOException e) {
			// TODO update exception handling
			e.printStackTrace();
			return null;
		}
		
    }
    
    // Calls the fetchCurrentPrice method to update the poftolio object with up to
    // date stock prices`
    protected static void updateStockPrices(Portfolio portfolio, boolean updatePrices) {
    	if (updatePrices) {
    		for (Map.Entry<String, Stock> entry : portfolio.getStocks().entrySet()) {
    			// set each ticker to variable in each iteration
    			String ticker = entry.getKey();
    			// Fetch current price for ticker using API
    			double currentPrice = fetchCurrentPrice(ticker);
    			entry.getValue().setClosingPrice(currentPrice);
    		}
    		writePortfolioToFile(portfolio);
    	}
    }
}
package jdstockmarket;

/**
 * The {@code Stock} class encapsulates the essential data pertaining to a particular stock.
 * It contains fields to hold the stock's ticker symbol, company name, closing price. 
 * This class provides a constructor for initializing a {@code Stock} object with
 * specific values and a set of getter and setter methods for accessing and modifying these fields.
 * 
 * <p>Example usage:
 * <pre>
 * {@code 
 * Stock appleStock = new Stock("AAPL", "Apple Inc.", 145.09, 146.00, 144.00);
 * String ticker = appleStock.getTicker();  // Returns "AAPL"
 * Double closingPrice = appleStock.getPriceClosing();  // Returns 145.09
 * }
 * </pre>
 * 
 * @author Michael Louis
 * @version 1.0/October 29, 2024
 */

public class Stock {
	
	private String stockSymbol;
	private Double closingPrice;
	private int shares;
	
	public Stock(String stockSymbol, Double closingPrice, int shares) {
		
		this.stockSymbol = stockSymbol;
		this.closingPrice = closingPrice;
		this.shares = shares;
		
	}

	/**
	 * @return the stock symbol
	 */
	public String getStockSymbol() {
		return stockSymbol;
	}

	/**
	 * @param symbol to set
	 */
	public void setStockSymbol(String stockSymbol) {
		this.stockSymbol = stockSymbol;
	}


	/**
	 * @return the priceClosing
	 */
	public Double getClosingPrice() {
		return closingPrice;
	}

	/**
	 * @param closingPrice the priceClosing to set
	 */
	public void setClosingPrice(Double closingPrice) {
		this.closingPrice = closingPrice;
	}

	/**
	 * @return the shares
	 */
	public int getShares() {
		return shares;
	}

	/**
	 * @param shares the shares to set
	 */
	public void setShares(int shares) {
		this.shares = shares;
	}
	

}

package jdstockmarket;

import java.awt.EventQueue;
import java.awt.GridLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.BorderLayout;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JButton;
import javax.swing.border.LineBorder;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
//import com.toedter.calendar.JDateChooser;
import com.toedter.calendar.*;

public class StockDataFrame extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel projectPane;
	//	private JTextField emptyTextField;
	//	private JTextField txtSymbol;
	private JTable table;
	private String stockSymbol = null ;//"GOOG"; // Default Stock Symbol
	protected Container graphAreaPanel;


	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		//EventQueue.invokeLater(new Runnable() {
		//	public void run() {
		try {
			StockDataFrame frame = new StockDataFrame(); 
			frame.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Create the frame.
	 * @throws JsonProcessingException 
	 * @throws JsonMappingException 
	 */
	public StockDataFrame() throws JsonMappingException, JsonProcessingException {

		this.setTitle("Stock Graph and Portfolio Display Program - Michael Louis ");
		// Set the location of the JFrame: (x, y) = (120, 20)
		//this.setLocation(120, 20);
		this.setLocationRelativeTo(null);

		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		//setBounds(100, 10, 860, 662);
	//                     , width, height)
		setBounds(50, 5, 630, 531); //50,100));
		
		//setBounds(defaultCloseOperation, defaultCloseOperation, defaultCloseOperation, defaultCloseOperation)
		projectPane = new JPanel();
		projectPane.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(projectPane);
		// Left and Right
		projectPane.setLayout(new GridLayout(1, 2, 0, 0));   //entire frame, 1 row 2 columns

		JPanel selectionsPanel = new JPanel();
		projectPane.add(selectionsPanel);

		//Upper = Symbol/Date   Lower = Portfolio List
		selectionsPanel.setLayout(new GridLayout(2, 1, 0, 0));   // 2 rows, 1 column

		JPanel chartOptionsPanel = new JPanel();
		chartOptionsPanel.setBorder(new LineBorder(new Color(0, 64, 128)));
		chartOptionsPanel.setLayout(new GridLayout(8, 2, 0, 0));

		selectionsPanel.add(chartOptionsPanel);

		//Jlabel w multiple lines 
		chartOptionsPanel.add(new JLabel("<html>Choose A Stock Symbol<br>And A Date Range</html>"));
		chartOptionsPanel.add(new JLabel(""));
		chartOptionsPanel.add(new JLabel("Symbol: "));

		
		
		String[] symbolList = {"MSFT", "AVGO", "GOOG", "URI", "QQQ", "AAPL"};
		
		
		
		JComboBox<String> symbolComboBox = new JComboBox<>(symbolList);
		// Allow the combo box to be editable so users can type their own input
		symbolComboBox.setEditable(true);

		chartOptionsPanel.add(symbolComboBox);

		JLabel lblDateRange = new JLabel("Date Range: ");
		chartOptionsPanel.add(lblDateRange);

	
		
		// Date range JComboBox
		String[] dateRangeList = {"1 Day", "5 Days", "1 Month", "Year-To-Date", "1 Year", "5 Years", "Custom Range"};
		JComboBox<String> dateRangeComboBox = new JComboBox<>(dateRangeList);
		//dateRangeComboBox.setEditable(true);
		chartOptionsPanel.add(dateRangeComboBox);

		JLabel chooseStart = new JLabel("Choose Start Date");
		chartOptionsPanel.add(chooseStart);
		chooseStart.setEnabled(false);
	
		JLabel chooseEnd = new JLabel("Choose End Date");
		chartOptionsPanel.add(chooseEnd);
		chooseEnd.setEnabled(false);

		// Date choosers
		JDateChooser dateChooser = new JDateChooser();
		chartOptionsPanel.add(dateChooser);
		JDateChooser dateChooser_1 = new JDateChooser();
		chartOptionsPanel.add(dateChooser_1);

		// Initially disable the date choosers
		dateChooser.setEnabled(false);
		dateChooser_1.setEnabled(false);

		// Add ActionListener to enable/disable date choosers based on selected date range
		dateRangeComboBox.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        String selectedRange = (String) dateRangeComboBox.getSelectedItem();
		        boolean enableDateChoosers = "Custom Range".equals(selectedRange);
		        
				chooseStart.setEnabled(enableDateChoosers);
				chooseEnd.setEnabled(enableDateChoosers);

		        // Enable or disable the date choosers based on selection
		        dateChooser.setEnabled(enableDateChoosers);
		        dateChooser_1.setEnabled(enableDateChoosers);
		    }
		});

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
//		String[] dateRangeList = {"1 Day", "5 Days", "1 Month",
//				"Year-To-Date", "1 Year", "5 Years", "Custom Range"};
//		JComboBox<String> dateRangeComboBox = new JComboBox<>(dateRangeList);
//		
//		chartOptionsPanel.add(dateRangeComboBox);
//
//		chartOptionsPanel.add(new JLabel("Choose Start Date"));
//		chartOptionsPanel.add(new JLabel("Choose End Date"));
//
//		JDateChooser dateChooser = new JDateChooser();
//		chartOptionsPanel.add(dateChooser);
//
//		JDateChooser dateChooser_1 = new JDateChooser();
//		chartOptionsPanel.add(dateChooser_1);
//		
		// Now add a DisplayChart button in the 6th row, 1st column by adding empty placeholders if necessary
	    chartOptionsPanel.add(new JLabel("")); // empty placeholders to keep btnDisplayChart in the 6th row
	    chartOptionsPanel.add(new JLabel("")); // empty placeholders to keep btnDisplayChart in the 6th row
	    chartOptionsPanel.add(new JLabel("")); // empty placeholders to keep btnDisplayChart in the 6th row
			
	    JButton btnDisplayChart = new JButton("Re-Draw Chart");
		chartOptionsPanel.add(btnDisplayChart); // 6th row, 1st column


		//  Lower Panel is for Portfolio display
		JPanel portfolioPanel = new JPanel();
		selectionsPanel.add(portfolioPanel);
		portfolioPanel.setLayout(new BorderLayout(0, 0));

		JButton btnNewButton_1 = new JButton("Find Portfolio Value");
		portfolioPanel.add(btnNewButton_1, BorderLayout.NORTH);

		table = new JTable();
		table.setModel(new DefaultTableModel(
				new Object[][] {
					{"Symbol", "Price", "# Shares", "Market Value"},
					{null, null, null, null},
					{null, null, null, null},
					{null, null, null, null},
					{null, null, null, null},
					{null, null, null, null},
					{null, null, null, null},
					{null, null, null, null},
					{null, null, null, null},
					{null, null, null, null},
					{null, null, null, null},
					{null, "Total Porfolio", "Value:", null},
				},
				new String[] {
						"New column", "New column","New column", "New column"
				}
				));
		portfolioPanel.add(table, BorderLayout.CENTER);

		// uncomment next line to let user input a stock symbol from console
		//stockSymbol = getSymbolFromConsole(stockSymbol);  //arg is current stock symbol

		// Panel "chartPanel" in the second column of the JFrame
        stockSymbol = (String) symbolComboBox.getSelectedItem();
System.out.println("abt to make chart " + stockSymbol);
		AlphaVantageCloseChart myAVCloseChart = new AlphaVantageCloseChart ("test chart", stockSymbol);
		JFreeChart myChart = myAVCloseChart.getResultChart();

		// Place the chart into a JPanel
		JPanel graphAreaPanel = new JPanel(new BorderLayout());
		ChartPanel chartContainer = new ChartPanel(myChart);
		graphAreaPanel.add(chartContainer, BorderLayout.CENTER);

		JPanel myChartPanel = new JPanel();
		myChartPanel.setLayout(new GridBagLayout());  // GridBagLayout to control the proportions
		GridBagConstraints gbc = new GridBagConstraints();

		// Panel "graphAreaPanel" takes 80% of the height
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 1.0;  // Full width
		gbc.weighty = 0.85;  // 80% of the height
		gbc.fill = GridBagConstraints.BOTH;  // Fill both directions
		//		JPanel graphAreaPanel = new JPanel();
		//	graphAreaPanel.setBackground(Color.RED);  // Panel "graphAreaPanel" color
		//graphAreaPanel.add(new JLabel("Graph Area Panel - 80% height"));
		
		
		btnDisplayChart.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        // Update the stock symbol based on the selected item
		        stockSymbol = (String) symbolComboBox.getSelectedItem();
		        System.out.println("New Selected stock symbol: " + stockSymbol);

		        // Remove the previous chart if there is one
		        //graphAreaPanel = null;
		        //if (graphAreaPanel != null )
		        	graphAreaPanel.removeAll();

		        // Create a new AlphaVantageCloseChart instance with the updated stockSymbol
		        AlphaVantageCloseChart myAVCloseChart = null;
		        try {
		            myAVCloseChart = new AlphaVantageCloseChart("Updated Chart for " + stockSymbol, stockSymbol);
		        } catch (JsonMappingException e1) {
		            e1.printStackTrace();
		        } catch (JsonProcessingException e1) {
		            e1.printStackTrace();
		        }

		        // Get the new chart and display it
		        JFreeChart myChart = myAVCloseChart.getResultChart();
		        ChartPanel chartContainer = new ChartPanel(myChart);

		        // Add the new chart to the graphAreaPanel
		        graphAreaPanel.add(chartContainer, BorderLayout.CENTER);

		        // Refresh the graphAreaPanel to show the new chart
		        graphAreaPanel.revalidate();
		        graphAreaPanel.repaint();
		    }
		});
		
		
		myChartPanel.add(graphAreaPanel, gbc);

		// Panel "pricesPanel" takes 20% of the height
		gbc.gridy = 1;
		gbc.weighty = 0.15;  // 20% of the height
		JPanel pricesPanel = new JPanel();
		pricesPanel.setBackground(Color.cyan);  // Panel "pricesPanel" color

		pricesPanel.setLayout(new GridLayout(3, 2, 0, 0));

		JLabel lblNewLabel_1 = new JLabel("Currently:  ");
		lblNewLabel_1.setHorizontalAlignment(SwingConstants.RIGHT);
		pricesPanel.add(lblNewLabel_1);

		double todaysClose = myAVCloseChart.getLastPrice();
		JLabel lblCurrentPrice = new JLabel(String.valueOf(todaysClose));
		pricesPanel.add(lblCurrentPrice);

		JLabel lblNewLabel_4 = new JLabel("% Gain Today:  ");
		lblNewLabel_4.setHorizontalAlignment(SwingConstants.RIGHT);
		pricesPanel.add(lblNewLabel_4);

		//find yesterday's closing price
		//compute yesterday's date
		//form request
		//call api
		//extract yesterday's closing price
		double yesterdaysClose = myAVCloseChart.getLastPrice() * 0.90;

		JLabel lblGainToday = new JLabel(
				String.format("%.2f",
						(todaysClose - yesterdaysClose)	/ todaysClose*100) + "%");
		pricesPanel.add(lblGainToday);

		JLabel lblNewLabel_3 = new JLabel("% Gain On Chart:  ");
		lblNewLabel_3.setHorizontalAlignment(SwingConstants.RIGHT);
		pricesPanel.add(lblNewLabel_3);

		JLabel lblGainOnChart = new JLabel(
				String.format("%.2f",
						(todaysClose - myAVCloseChart.getFirstPrice())
						/ todaysClose*100) + "%");
		pricesPanel.add(lblGainOnChart);

		myChartPanel.add(pricesPanel, gbc);

		// Add panel "chartPanel" to the second column of the JFrame
		projectPane.add(myChartPanel);
	}

}
package jdstockmarket;

import java.util.*;

import org.json.JSONArray;
import org.json.JSONObject;
import java.io.IOException;

/**
 * The {@code StockJSONHandler} class provides a concrete implementation of the {@link JSONHandler} interface
 * for parsing JSON data and retrieving values from JSON objects. This class is specifically tailored to handle
 * JSON data in the context of stock market information.
 *
 * <p>This class implements the {@code parseJSON} method to convert a JSON string into a {@code JSONObject},
 * and the {@code getValue} method to retrieve a {@code JSONObject} associated with a specified key from a
 * given {@code JSONObject}.
 *
 * <p>Example usage:
 * <pre>
 * {@code 
 * JSONHandler jsonHandler = new StockJSONHandler();
 * JSONObject jsonObject = jsonHandler.parseJSON(jsonString);
 * JSONObject timeSeries = jsonHandler.getValue(jsonObject, "Time Series (5min)");
 * }
 * </pre>
 *
 * @author David Martindale
 * @author Jamshaid Ali
 * @version 2.0 (7 December 2023)
 * @see JSONHandler
 * @see JSONObject
 */

public class StockJSONHandler implements JSONHandler {
	
	// Named constants
	private static final String TIME_SERIES_KEY = "Time Series (5min)";

    /**
     * Parses the specified JSON string and returns a {@code JSONObject}.
     *
     * @param jsonData The JSON string to be parsed.
     * @return A {@code JSONObject} representing the parsed JSON data.
     */
    @Override
    public JSONObject parseJSON(String jsonData) {
        return new JSONObject(jsonData);
    }
    
    @Override
    public JSONArray parseJSONArray(String jsonData) {
    	return new JSONArray(jsonData);
    }

    /**
     * Retrieves a {@code JSONObject} associated with the specified key from the given {@code JSONObject}.
     *
     * @param jsonObject The {@code JSONObject} from which to retrieve the value.
     * @param key The key whose associated value is to be returned.
     * @return A {@code JSONObject} representing the value associated with the specified key.
     */
    @Override
    public JSONObject getValue(JSONObject jsonObject, String key) {
        return jsonObject.getJSONObject(key);
    }
    
    public JSONObject fetchStockData(StockMarketAPI stockAPI, String stockSymbol) throws IOException {
        String stockData = stockAPI.fetchLiveStockData(stockSymbol);
        return parseJSON(stockData);
        
    }

    public String displayStockInfo(JSONObject stockJSON, String stockSymbol) {
    	
        if (stockJSON.has("Time Series (5min)")) {
            JSONObject timeSeries = getValue(stockJSON, TIME_SERIES_KEY);
            ArrayList<String> timeStamps = new ArrayList<>(timeSeries.keySet());
            Collections.sort(timeStamps);
            String latestTimeStamp = timeStamps.get(timeStamps.size() - 1);
            JSONObject latestData = timeSeries.getJSONObject(latestTimeStamp);
            String mostRecentPrice = latestData.getString("4. close");
            String todaysHigh = latestData.getString("2. high");
            String todaysLow = latestData.getString("3. low");
            
            return formatStockInfo(stockSymbol, mostRecentPrice, todaysHigh, todaysLow);
        } else if (stockJSON.has("Information")){ 
            return " API request limit reached today...\n";
        } else if (stockJSON.keySet().isEmpty()) {
        	return " ERROR: API returned an empty object\n";
        } else if (stockJSON.has("Error Message")){
        	System.out.println(stockJSON);
        	return "  Invalid API call, please try again\n";
        } else {
        	System.out.println(stockJSON);
        	return "  ERROR: error with displayStockInfo in StockJSONHandler\n";
        }
    }
    
//    public String displayCongressInfo(JSONArray stockJSON, String stockSymbol) {
//    	return formatCongressInfo(stockJSON, stockSymbol);
//    }

    private String formatStockInfo(String stockSymbol, String mostRecentPrice, String todaysHigh, String todaysLow) {
        return "  STOCK TICKER: " + "[ " + stockSymbol + " ]"
             + "\n\n" 
             + "  - Current price: $" + mostRecentPrice + "\n"
             + "  - Today's high:  $" + todaysHigh + "\n" 
             + "  - Today's low:   $" + todaysLow + "\n\n";
    }
    
//    private String formatCongressInfo(JSONArray jsonArray, String stockSymbol) {
//        StringBuilder formattedInfo = new StringBuilder();
//        boolean nancyPelosiTraded = false;
//        StringBuilder nancyPelosiTrades = new StringBuilder();
//        
//        if (jsonArray.isEmpty()) {
//        	formattedInfo.append("  Error with Input: Please enter a valid stock symbol or try again");
//        	return formattedInfo.toString();
//        }
//
//        // Check if Nancy Pelosi has any trades
//        for (int i = 0; i < jsonArray.length(); i++) {
//            JSONObject jsonObject = jsonArray.getJSONObject(i);
//            String representative = jsonObject.getString("Representative");
//
//            if ("Nancy Pelosi".equals(representative)) {
//                nancyPelosiTraded = true;
//                appendTradeInfo(nancyPelosiTrades, jsonObject);
//            }
//        }
//
//        // Based on whether Nancy Pelosi traded or not, format the output
//        if (nancyPelosiTraded) {
//            formattedInfo.append("  Nancy Pelosi has recently traded " + stockSymbol + " !\n\n");
//            formattedInfo.append(nancyPelosiTrades);
//        } else {
//            formattedInfo.append("  Nancy Pelosi has not recently traded " + stockSymbol + "\n  Here are the most recent congressional trades:\n\n");
//            for (int i = 0; i < Math.min(20, jsonArray.length()); i++) {
//                JSONObject jsonObject = jsonArray.getJSONObject(i);
//                appendTradeInfo(formattedInfo, jsonObject);
//            }
//        }
//        
//        return formattedInfo.toString();
//    }

    private void appendTradeInfo(StringBuilder builder, JSONObject jsonObject) {
        String representative = jsonObject.getString("Representative");
        String transactionDate = jsonObject.getString("TransactionDate"); 
        String ticker = jsonObject.getString("Ticker");
        String transaction = jsonObject.getString("Transaction");
        String range = jsonObject.getString("Range");
        String house = jsonObject.getString("House");
        String party = jsonObject.getString("Party");
        
        builder.append("  [Representative]: ").append(representative + "\n")
               .append("  Party: ").append(party + "\n")
               .append("  House: ").append(house + "\n")
               .append("  Ticker: ").append(ticker + "\n")
               .append("  Transaction: ").append(transaction + "\n")
               .append("  Transaction Date: ").append(transactionDate + "\n")
               .append("  Range: ").append(range + "\n\n");
    }


    
}

package jdstockmarket;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import java.io.IOException;

/**
 * The {@code StockMarketAPI} class encapsulates interactions with the Alpha Vantage API
 * for retrieving live stock data. It leverages the OkHttp library for handling HTTP 
 * requests and responses.
 *
 * <p>The primary method, {@code fetchLiveStockData}, fetches live stock data based on a 
 * provided stock symbol, using a specified API key to authenticate with the Alpha Vantage service.
 *
 * <p>Example usage:
 * <pre>
 * {@code 
 * StockMarketAPI api = new StockMarketAPI();
 * String stockData = api.fetchLiveStockData("AAPL");
 * }
 * </pre>
 *
 * @author David Martindale
 * @author Jamshaid Ali
 * @version 2.0 (7 December 2023)
 * @see OkHttpClient
 * @see Request
 * @see Response
 */
public class StockMarketAPI {

	// Alpha Vantage API key for authentication
	//private static final String API_KEY = "UTY1ZRK0IBFZH4DE"; // David M's key
	//private static final String API_KEY = "CY5Z4VYMIRMAC0RE";  //Michael's basic key
	private static final   String API_KEY = "Z815S7QU1PEQEY5G";  //Michael's premium key
	// Http Client instance for executing HTTP requests
	private OkHttpClient client;

	/**
	 * Constructor initializes a new OkHttpClient instance.
	 */
	public StockMarketAPI() {
		this.client = new OkHttpClient();
	}

	/**
	 * Fetches live stock data for a specified stock symbol from the Alpha Vantage API.
	 *
	 * Constructs a URL using the provided stock symbol, and issues an HTTP GET request
	 * to the Alpha Vantage API. Parses the HTTP response and returns the response body
	 * as a string.
	 *
	 * @param stockSymbol The stock symbol for which to fetch data.
	 * @return A string containing the JSON response from the Alpha Vantage API.
	 * @throws IOException If an I/O error occurs while handling the request or response.
	 */
	public String fetchLiveStockData(String stockSymbol) throws IOException {
		// Construct the URL for the Alpha Vantage API request
		 String url; // = null;
		 url = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&interval=5min"  
//		 url = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=" 
		//url = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol="
			//	+ "&extended_hours=false"
				+ "&symbol="+ stockSymbol + "&apikey=" + API_KEY;

		 //  Build the HTTP request
		Request request = new Request.Builder()
				.url(url)
				.build();

		// Execute the HTTP request and handle the response
		try (Response response = client.newCall(request).execute()) {
			// Check for a successful response, throw an IOException for an unsuccessful response
			if (!response.isSuccessful()) {
				throw new IOException("Error: Response failed...\n" + response);
			}
			// Return the response body as a string
			String reply = response.body().string(); 
			System.out.println(reply);
			return reply;       
		}
	}
}
